version: "3.3"

networks:
  proxy:
    external: true

secrets:
  htpasswd:
    file: ./secrets/htpasswd

services:
  traefik:
    image: traefik:3.0
    container_name: traefik
    command:
      - --api=true
      - --api.dashboard=true
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --providers.docker
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      - --certificatesresolvers.http.acme.email=$LETSENCRYPT_EMAIL
      - --certificatesresolvers.http.acme.storage=/acme.json
      - --certificatesresolvers.http.acme.httpchallenge=true
      - --certificatesresolvers.http.acme.httpchallenge.entrypoint=http
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO
      - --accessLog.filePath=/logs/access.log
      - --metrics.prometheus=true
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./appdata/traefik2/acme.json:/acme.json
      - ./appdata/traefik2/rules/:/rules
      - ./logs/traefik2/:/logs
    environment:
      - HTPASSWD_FILE=/run/secrets/htpasswd
    secrets:
      - htpasswd
    labels:
      - "traefik.enable=true"
      # http to https redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`.+`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # host
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`$TRAEFIK_DOMAIN`)"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=http"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      # middlewares
      #- "traefik.http.routers.traefik-secure.middlewares=chain-no-auth@file"
      - "traefik.http.routers.traefik-secure.middlewares=chain-basic-auth@file"

  onlyoffice:
    image: onlyoffice/documentserver:latest
    container_name: onlyoffice
    environment:
      - JWT_SECRET=$ONLYOFFICE_JWT_SECRET
      - NGINX_WORKER_PROCESSES=$ONLYOFFICE_NGINX_WORKER_PROCESSES
      - NGINX_WORKER_CONNECTIONS=$ONLYOFFICE_NGINX_WORKER_CONNECTIONS
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs/onlyoffice:/var/log/onlyoffice
    labels:
      - "traefik.enable=true"
      # host
      - "traefik.http.routers.onlyoffice-secure.entrypoints=https"
      - "traefik.http.routers.onlyoffice-secure.rule=Host(`$ONLYOFFICE_DOMAIN`)"
      - "traefik.http.routers.onlyoffice-secure.tls=true"
      - "traefik.http.routers.onlyoffice-secure.tls.certresolver=http"
      - "traefik.http.routers.onlyoffice-secure.service=onlyoffice"
      - "traefik.http.services.onlyoffice.loadbalancer.server.port=80"
      # middlewares
      - "traefik.http.routers.onlyoffice-secure.middlewares=onlyoffice-headers"
      - "traefik.http.middlewares.onlyoffice-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.onlyoffice-headers.headers.accessControlAllowOriginList=$ONLYOFFICE_ACCESS_CONTROL_ALLOW_ORIGIN_LIST"

  wikijs-db:
    image: postgres:11-alpine
    container_name: wikijs-db
    environment:
      - POSTGRES_DB=$WIKIJS_DB
      - POSTGRES_PASSWORD=$WIKIJS_PASSWORD
      - POSTGRES_USER=$WIKIJS_USER
    restart: unless-stopped
    volumes:
      - ./appdata/wikijs/db:/var/lib/postgresql/data
    networks:
      - proxy

  wikijs:
    image: requarks/wiki:2
    container_name: wikijs
    depends_on:
      - wikijs-db
    environment:
      - DB_TYPE=postgres
      - DB_HOST=wikijs-db
      - DB_PORT=5432
      - DB_USER=$WIKIJS_USER
      - DB_PASS=$WIKIJS_PASSWORD
      - DB_NAME=$WIKIJS_DB
    restart: unless-stopped
    volumes:
      - ./appdata/wikijs/.ssh:/home/node/.ssh
    labels:
      - "traefik.enable=true"
     # host
      - "traefik.http.routers.wikijs-secure.entrypoints=https"
      - "traefik.http.routers.wikijs-secure.rule=Host(`$WIKIJS_DOMAIN`)"
      - "traefik.http.routers.wikijs-secure.tls=true"
      - "traefik.http.routers.wikijs-secure.tls.certresolver=http"
      - "traefik.http.routers.wikijs-secure.service=wikijs"
      - "traefik.http.services.wikijs.loadbalancer.server.port=3000"
      - "traefik.docker.network=proxy"
    networks:
       - proxy

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: unless-stopped
    volumes:
      - ./appdata/influxdb/lib:/var/lib/influxdb2
      - ./appdata/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      # host
      - "traefik.http.routers.influxdb-secure.entrypoints=https"
      - "traefik.http.routers.influxdb-secure.rule=Host(`$INFLUXDB_DOMAIN`)"
      - "traefik.http.routers.influxdb-secure.tls=true"
      - "traefik.http.routers.influxdb-secure.tls.certresolver=http"
      - "traefik.http.routers.influxdb-secure.service=influxdb"
      - "traefik.http.services.influxdb.loadbalancer.server.port=8086"
      - "traefik.docker.network=proxy"

  telegraf:
    image: telegraf:alpine
    container_name: telegraf
    depends_on:
      - influxdb
    restart: unless-stopped
    volumes:
      - ./appdata/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    networks:
      - proxy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
    volumes:
      - ./appdata/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./appdata/prometheus/data:/prometheus
    networks:
      - proxy

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    command:
      - --path.procfs=/host/proc
      - --path.rootfs=/rootfs
      - --path.sysfs=/host/sys
      - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - proxy

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    user: "$GRAFANA_USER"
    depends_on:
      - influxdb
    volumes:
      - ./appdata/grafana/lib:/var/lib/grafana
    networks:
       - proxy
    environment:
      - GF_SERVER_DOMAIN=$GRAFANA_DOMAIN
      - GF_SERVER_ROOT_URL=https://%(domain)s/
    labels:
      - "traefik.enable=true"
      # host
      - "traefik.http.routers.grafana-secure.entrypoints=https"
      - "traefik.http.routers.grafana-secure.rule=Host(`$GRAFANA_DOMAIN`)"
      - "traefik.http.routers.grafana-secure.tls=true"
      - "traefik.http.routers.grafana-secure.tls.certresolver=http"
      - "traefik.http.routers.grafana-secure.service=grafana"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.docker.network=proxy"

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./appdata/uptime-kuma/data:/app/data
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      # host
      - "traefik.http.routers.uptime-kuma-secure.entrypoints=https"
      - "traefik.http.routers.uptime-kuma-secure.rule=Host(`$UPTIME_KUMA_DOMAIN`)"
      - "traefik.http.routers.uptime-kuma-secure.tls=true"
      - "traefik.http.routers.uptime-kuma-secure.tls.certresolver=http"
      - "traefik.http.routers.uptime-kuma-secure.service=uptime-kuma"
      - "traefik.http.services.uptime-kuma.loadbalancer.server.port=3001"
      # middlwares
      - "traefik.http.routers.uptime-kuma-secure.middlewares=chain-basic-auth@file"

  umami-db:
    image: postgres:15-alpine
    container_name: umami-db
    environment:
      - POSTGRES_DB=$UMAMI_DB
      - POSTGRES_PASSWORD=$UMAMI_PASSWORD
      - POSTGRES_USER=$UMAMI_USER
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./appdata/umami/db:/var/lib/postgresql/data
    networks:
      - proxy

  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    container_name: umami
    depends_on:
      umami-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://$UMAMI_USER:$UMAMI_PASSWORD@umami-db:5432/$UMAMI_DB
      - DATABASE_TYPE=postgresql
      - APP_SECRET=$UMAMI_SECRET
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      # host
      - "traefik.http.routers.umami-secure.entrypoints=https"
      - "traefik.http.routers.umami-secure.rule=Host(`$UMAMI_DOMAIN`)"
      - "traefik.http.routers.umami-secure.tls=true"
      - "traefik.http.routers.umami-secure.tls.certresolver=http"
      - "traefik.http.routers.umami-secure.service=umami"
      - "traefik.http.services.umami.loadbalancer.server.port=3000"

  paperless-ngx-redis:
    image: docker.io/library/redis:7
    container_name: paperless-ngx-redis
    restart: unless-stopped
    volumes:
      - ./appdata/paperless-ngx/broker:/data
    networks:
      - proxy

  paperless-ngx-db:
    image: docker.io/library/postgres:15
    container_name: paperless-ngx-db
    restart: unless-stopped
    volumes:
      - ./appdata/paperless-ngx/db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    networks:
      - proxy

  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    restart: unless-stopped
    depends_on:
      - paperless-ngx-db
      - paperless-ngx-redis
      - gotenberg
      - tika
    volumes:
      - ./appdata/paperless-ngx/data:/usr/src/paperless/data
      - ./appdata/paperless-ngx/media:/usr/src/paperless/media
      - ./appdata/paperless-ngx/export:/usr/src/paperless/export
      - ./appdata/paperless-ngx/consume:/usr/src/paperless/consume
    environment:
      PAPERLESS_REDIS: redis://paperless-ngx-redis:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      # host
      - "traefik.http.routers.paperless-ngx-secure.entrypoints=https"
      - "traefik.http.routers.paperless-ngx-secure.rule=Host(`$PAPERLESS_NGX_DOMAIN`)"
      - "traefik.http.routers.paperless-ngx-secure.tls=true"
      - "traefik.http.routers.paperless-ngx-secure.tls.certresolver=http"
      - "traefik.http.routers.paperless-ngx-secure.service=paperless-ngx"
      - "traefik.http.services.paperless-ngx.loadbalancer.server.port=8000"

  gotenberg:
    image: docker.io/gotenberg/gotenberg:7.10
    container_name: gotenberg
    restart: unless-stopped
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    networks:
      - proxy

  tika:
    image: ghcr.io/paperless-ngx/tika:latest
    container_name: tika
    restart: unless-stopped
    networks:
      - proxy